; ModuleID = 'application'
source_filename = "source file name"

%mp_struct = type opaque

@printNumberTemplate = unnamed_addr constant [4 x i8] c"%s\0A\00"
@undefinedMsgStr = unnamed_addr constant [11 x i8] c"undefined\0A\00"
@greetingsMessage = unnamed_addr constant [85 x i8] c"The application has been generated by the Aspectation multi-language prototype v0.1\0A\00"
@const_1 = unnamed_addr constant [2 x i8] c"1\00"
@const_2 = unnamed_addr constant [2 x i8] c"2\00"
@const_3 = unnamed_addr constant [2 x i8] c"3\00"
@const_4 = unnamed_addr constant [2 x i8] c"4\00"
@const_5 = unnamed_addr constant [2 x i8] c"5\00"
@const_7 = unnamed_addr constant [2 x i8] c"7\00"
@const_6 = unnamed_addr constant [2 x i8] c"6\00"

declare i32 @mp_init(%mp_struct*)

declare i8* @malloc(i64)

declare i32 @printf(i8*, ...)

declare i32 @mp_read_radix(%mp_struct*, i8*, i32)

declare i32 @mp_toradix(%mp_struct*, i8*, i32)

declare i32 @mp_radix_size(%mp_struct*, i32, i32*)

define void @print(%mp_struct* %v_0, i64 %def_1_0) {
entry_0:
  %cmp_0 = icmp eq i64 0, %def_1_0
  br i1 %cmp_0, label %then_0, label %else_0

then_0:                                           ; preds = %entry_0
  %templateGep_0 = getelementptr i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @printNumberTemplate, i32 0, i32 0), i64 0
  %memForSize_0 = alloca i32
  %mp_radix_size_result_0 = call i32 @mp_radix_size(%mp_struct* %v_0, i32 10, i32* %memForSize_0)
  %size_0 = load i32, i32* %memForSize_0
  %extSize_0 = sext i32 %size_0 to i64
  %malloc_result_0 = call i8* @malloc(i64 %extSize_0)
  %mp_toradix_result_0 = call i32 @mp_toradix(%mp_struct* %v_0, i8* %malloc_result_0, i32 10)
  %printf_result_0 = call i32 (i8*, ...) @printf(i8* %templateGep_0, i8* %malloc_result_0)
  br label %ifcont_0

else_0:                                           ; preds = %entry_0
  %undefinedMsgStrGep_0 = getelementptr i8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @undefinedMsgStr, i32 0, i32 0), i64 0
  %printf_result_1 = call i32 (i8*, ...) @printf(i8* %undefinedMsgStrGep_0)
  br label %ifcont_0

ifcont_0:                                         ; preds = %else_0, %then_0
  %0 = phi i64 [ 0, %then_0 ], [ 0, %else_0 ]
  ret void
}

define i32 @main() {
main_entry_0:
  %greetingsMessageGep_0 = getelementptr i8, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @greetingsMessage, i32 0, i32 0), i64 0
  %printf_result_0 = call i32 (i8*, ...) @printf(i8* %greetingsMessageGep_0)
  call void @main.1()
  ret void
}

define void @single2(%mp_struct* %b_0, %mp_struct* %c_0, i64 %def_1_0) {
entry_0:
  %malloc_result_0 = call i8* @malloc(i64 24)
  %memForMpStruct_0 = bitcast i8* %malloc_result_0 to %mp_struct*
  %mp_init_result_0 = call i32 @mp_init(%mp_struct* %memForMpStruct_0)
  %numberStrBgn_0 = getelementptr i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const_1, i32 0, i32 0), i64 0
  %mp_read_radix_result_0 = call i32 @mp_read_radix(%mp_struct* %memForMpStruct_0, i8* %numberStrBgn_0, i32 10)
  call void @print(%mp_struct* %memForMpStruct_0, i64 0)
  %malloc_result_1 = call i8* @malloc(i64 24)
  %memForMpStruct_1 = bitcast i8* %malloc_result_1 to %mp_struct*
  %mp_init_result_1 = call i32 @mp_init(%mp_struct* %memForMpStruct_1)
  %numberStrBgn_1 = getelementptr i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const_2, i32 0, i32 0), i64 0
  %mp_read_radix_result_1 = call i32 @mp_read_radix(%mp_struct* %memForMpStruct_1, i8* %numberStrBgn_1, i32 10)
  call void @print(%mp_struct* %memForMpStruct_1, i64 0)
  %result_0 = call %mp_struct* @retval()
  call void @print(%mp_struct* %result_0, i64 0)
  call void @print(%mp_struct* %b_0, i64 0)
  call void @print(%mp_struct* %c_0, i64 0)
  call void @print_num6()
  call void @print_num7()
  ret void undef
}

define %mp_struct* @retval() {
entry_0:
  %malloc_result_0 = call i8* @malloc(i64 24)
  %memForMpStruct_0 = bitcast i8* %malloc_result_0 to %mp_struct*
  %mp_init_result_0 = call i32 @mp_init(%mp_struct* %memForMpStruct_0)
  %numberStrBgn_0 = getelementptr i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const_3, i32 0, i32 0), i64 0
  %mp_read_radix_result_0 = call i32 @mp_read_radix(%mp_struct* %memForMpStruct_0, i8* %numberStrBgn_0, i32 10)
  ret %mp_struct* %memForMpStruct_0
}

define %mp_struct* @single1(%mp_struct* %a_0, i64 %def_1_0) {
entry_0:
  call void @print(%mp_struct* %a_0, i64 0)
  ret %mp_struct* %a_0
}

define void @main.1() {
entry_0:
  %malloc_result_0 = call i8* @malloc(i64 24)
  %memForMpStruct_0 = bitcast i8* %malloc_result_0 to %mp_struct*
  %mp_init_result_0 = call i32 @mp_init(%mp_struct* %memForMpStruct_0)
  %numberStrBgn_0 = getelementptr i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const_4, i32 0, i32 0), i64 0
  %mp_read_radix_result_0 = call i32 @mp_read_radix(%mp_struct* %memForMpStruct_0, i8* %numberStrBgn_0, i32 10)
  %malloc_result_1 = call i8* @malloc(i64 24)
  %memForMpStruct_1 = bitcast i8* %malloc_result_1 to %mp_struct*
  %mp_init_result_1 = call i32 @mp_init(%mp_struct* %memForMpStruct_1)
  %numberStrBgn_1 = getelementptr i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const_5, i32 0, i32 0), i64 0
  %mp_read_radix_result_1 = call i32 @mp_read_radix(%mp_struct* %memForMpStruct_1, i8* %numberStrBgn_1, i32 10)
  %result_0 = call %mp_struct* @single1(%mp_struct* %memForMpStruct_1, i64 0)
  call void @single2(%mp_struct* %memForMpStruct_0, %mp_struct* %result_0, i64 0)
  ret void undef
}

define void @print_num7() {
entry_0:
  %malloc_result_0 = call i8* @malloc(i64 24)
  %memForMpStruct_0 = bitcast i8* %malloc_result_0 to %mp_struct*
  %mp_init_result_0 = call i32 @mp_init(%mp_struct* %memForMpStruct_0)
  %numberStrBgn_0 = getelementptr i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const_7, i32 0, i32 0), i64 0
  %mp_read_radix_result_0 = call i32 @mp_read_radix(%mp_struct* %memForMpStruct_0, i8* %numberStrBgn_0, i32 10)
  call void @print(%mp_struct* %memForMpStruct_0, i64 0)
  ret void undef
}

define void @print_num6() {
entry_0:
  %malloc_result_0 = call i8* @malloc(i64 24)
  %memForMpStruct_0 = bitcast i8* %malloc_result_0 to %mp_struct*
  %mp_init_result_0 = call i32 @mp_init(%mp_struct* %memForMpStruct_0)
  %numberStrBgn_0 = getelementptr i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const_6, i32 0, i32 0), i64 0
  %mp_read_radix_result_0 = call i32 @mp_read_radix(%mp_struct* %memForMpStruct_0, i8* %numberStrBgn_0, i32 10)
  call void @print(%mp_struct* %memForMpStruct_0, i64 0)
  ret void undef
}
